name: üåê DevSecOps Terraform Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

permissions:
  contents: read
  id-token: write

jobs:
  terraform:
    name: üß± Terraform Security & Compliance Pipeline
    runs-on: ubuntu-latest

    env:
      ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
      TF_WORKING_DIR: ./infrastructure/network

    steps:
      # -------------------------
      # Checkout the repo
      # -------------------------
      - name: üõ†Ô∏è Checkout repository
        uses: actions/checkout@v4

      # -------------------------
      # Setup Terraform
      # -------------------------
      - name: ‚öôÔ∏è Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.13.3

      # -------------------------
      # Terraform Formatting Check
      # -------------------------
      - name: üîç Terraform Format Check
        run: terraform fmt -check -recursive
        working-directory: ${{ env.TF_WORKING_DIR }}

      # -------------------------
      # Terraform Init
      # -------------------------
      - name: üöÄ Terraform Init
        run: terraform init -upgrade
        working-directory: ${{ env.TF_WORKING_DIR }}

      # -------------------------
      # Terraform Validate
      # -------------------------
      - name: üß© Terraform Validate
        run: terraform validate
        working-directory: ${{ env.TF_WORKING_DIR }}

      # -------------------------
      # Terraform Lint (TFLint)
      # -------------------------
      - name: üßπ Install and Run TFLint
        run: |
          curl -s https://raw.githubusercontent.com/terraform-linters/tflint/master/install_linux.sh | bash
          tflint --version
          tflint --init
          tflint --recursive
        working-directory: ${{ env.TF_WORKING_DIR }}

      # -------------------------
      # Run Checkov Security Scan
      # -------------------------
      - name: üõ°Ô∏è Run Checkov Security Scan
        uses: bridgecrewio/checkov-action@v12
        with:
          directory: ${{ env.TF_WORKING_DIR }}

      # -------------------------
      # Run OPA Policy Evaluation
      # -------------------------
      - name: üîí Run OPA Policy Evaluation
        run: |
          wget https://openpolicyagent.org/downloads/latest/opa_linux_amd64 -O opa
          sudo install -m 0755 opa /usr/local/bin/opa
          opa eval --fail-defined --format pretty \
            --data ./policies/opa \
            "data.terraform.deny"
        continue-on-error: true
        working-directory: .

      # -------------------------
      # Terraform Plan
      # -------------------------
      - name: üßÆ Terraform Plan
        id: plan
        run: |
          terraform plan -out=tfplan \
            -var "resource_group_name=rg-devsecops" \
            -var "vnet_name=vnet-devsecops" \
            -var "subnet_name=subnet-dev"
        working-directory: ${{ env.TF_WORKING_DIR }}

      # -------------------------
      # Terraform Apply (same job)
      # -------------------------
      - name: ‚úÖ Terraform Apply
        if: github.ref == 'refs/heads/main'
        run: terraform apply -auto-approve tfplan
        working-directory: ${{ env.TF_WORKING_DIR }}

